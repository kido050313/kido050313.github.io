<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[小程序自定义顶部导航栏]]></title>
    <url>%2F2018%2F10%2F07%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%E6%A0%8F%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;今天开始了新的小程序踩坑，有一个需求是顶部导航栏需要渐变色，但是小程序的navigationBarBackgroundColor属性只支持有效的颜色值，不支持linear-gradient,最后选择了自定义导航栏开发。&emsp;&emsp;要使用小程序的自定义导航栏只需要在app.json中配置 目前小程序不支持单个页面设置，所以一旦决定使用自定义导航看，那么每个页面都要设置，为了方便我将其写成了一个组件 &emsp;&emsp; 组件目录： &emsp;&emsp; index.wxml文件:1234567891011121314151617181920212223242526&lt;view class=&quot;m-container&quot;&gt; &lt;view class=&quot;navigate-title &#123;&#123;navbarData.isNormal == true?&apos;normal&apos;:&apos;linear&apos;&#125;&#125;&quot; style=&quot;padding-top:&#123;&#123;(statusBarHeight+titleBarHeight)*2&#125;&#125;rpx;&quot;&gt;&lt;/view&gt; &lt;view class=&quot;header-title&quot;&gt; &lt;view class=&quot;status-bar&quot; style=&quot;height:&#123;&#123;statusBarHeight&#125;&#125;px;&quot;&gt;&lt;/view&gt; &lt;view class=&quot;title-bar&quot; style=&quot;height:&#123;&#123;titleBarHeight&#125;&#125;px&quot;&gt; &lt;view class=&quot;left-icon&quot; wx:if=&quot;&#123;&#123;navbarData.isBack&#125;&#125;&quot;&gt; &lt;view wx:if=&quot;&#123;&#123;share&#125;&#125;&quot;&gt; &lt;image bindtap=&quot;_backhome&quot; class=&quot;u-home&quot; src=&apos;&apos;&gt;&lt;/image&gt; &lt;/view&gt; &lt;view wx:else&gt; &lt;block wx:if=&quot;&#123;&#123;navbarData.color == &apos;#000&apos;&#125;&#125;&quot;&gt; &lt;image bindtap=&quot;_navback&quot; class=&quot;navigator&quot; src=&quot;../../images/icon/b_back.png&quot;&gt;&lt;/image&gt; &lt;/block&gt; &lt;block wx:else&gt; &lt;image bindtap=&quot;_navback&quot; class=&quot;navigator&quot; src=&quot;../../images/icon/w_back.png&quot;&gt;&lt;/image&gt; &lt;/block&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class=&quot;title&quot; style=&quot;color:&#123;&#123;navbarData.color&#125;&#125;;&quot;&gt;&#123;&#123;navbarData.title&#125;&#125;&lt;/view&gt; &lt;view class=&quot;right-icon&quot;&gt;&lt;/view&gt; &lt;/view&gt; &lt;/view&gt;&lt;/view&gt;~~~ &amp;emsp;&amp;emsp; index.wxss文件： .header-title { position: fixed; top: 0; width: 100%; z-index: 9999;}.linear { background: linear-gradient(90deg,#FFC426,#F99120);}.normal { background: #FFFCF8;} / .status-bar { background: linear-gradient(90deg,#FFC426,#F99120);} / .right-icon { width: 100rpx; height: 100rpx; float: right;} .title { text-align: center; line-height: 100rpx; font-size: 38rpx;} .title-bar { width: 100%; overflow: hidden;} .left-icon { width: 100rpx; height: 100rpx; float: left;} / 返回首页 /.u-home { width: 36rpx; height: 36rpx; float: left; margin-top: 32rpx; margin-left: 35rpx;} /箭头部分/ .navigator { width: 18rpx; height: 34rpx; float: left; margin-top: 32rpx; / background: #FFF; / margin-left: 35rpx;}12&amp;emsp;&amp;emsp;index.js文件: // common/navbar/index.jsconst app = getApp(); Component({ options: { multipleSlots: true, // 在组件定义时的选项中启用多slot支持 }, /** 组件的属性列表*/properties: {navbarData: { //navbarData 由父页面传递的数据，变量名字自命名 type: Object, value: {}, observer: function (newVal, oldVal) { }}}, /** 组件的初始数据*/data: {statusBarHeight: ‘’,titleBarHeight: ‘’,//默认值，默认不显示navbarData: { isBack: ‘’}},attached: function(res){// 获取是否是通过分享进入的小程序this.setData({ share: app.globalData.share})// 定义导航栏的高度 方便对齐this.setData({ statusBarHeight: wx.getStorageSync(‘statusBarHeight’), titleBarHeight: wx.getStorageSync(‘titleBarHeight’)})}, /** 组件的方法列表*/methods: {// 返回上一页面_navback() { wx.navigateBack()},//返回到首页_backhome() { wx.switchTab({ url: ‘/pages/index/index’, })}},}) 12&amp;emsp;&amp;emsp;index.json文件: { “component”: true, “usingComponents”: {}}12&amp;emsp;&amp;emsp;app.js文件: //app.jsconst util = require(“utils/util.js”); App({ url: “https://www.wkcq365.com/api&quot;, onLaunch: function (options) { var _this = this // 判断是否由分享进入小程序 if (options.scene == 1007 || options.scene == 1008) { _this.globalData.share = true } else { _this.globalData.share = false }; wx.getSystemInfo({ success: function (res) { console.log(res) // 采用百分比适配不同的安卓手机，主要针对刘海屏安卓手机(此方法有待完善) let screenHeight = res.windowHeight; let totalTopHeight = parseInt(screenHeight / 8) if (res.model.indexOf(&apos;iPhone X&apos;) !== -1) { totalTopHeight = 88 } else if (res.model.indexOf(&apos;iPhone&apos;) !== -1) { totalTopHeight = 64 } wx.setStorageSync(&apos;statusBarHeight&apos;, res.statusBarHeight) wx.setStorageSync(&apos;titleBarHeight&apos;, totalTopHeight - res.statusBarHeight) }, failure() { wx.setStorageSync(&apos;statusBarHeight&apos;, 0) wx.setStorageSync(&apos;titleBarHeight&apos;, 0) } }) }, globalData: { userLoginInfo: null, share: false, //分享默认为false }, userLogin: function(res){ console.log(res) }})1234+ 如何使用自定义导航栏： 在微信小程序页面中： pages文件夹index.wxml文件： // 引入自定义组价。’navbar-data’中header是自定义名字，决定了组件中’navbarData’的名字 12&amp;emsp;&amp;emsp;pages文件夹index.json文件中(声明使用的组件，和组件的地址)： “usingComponents”: { “header”: “/common/navbar/index” }1&amp;emsp;&amp;emsp;pages文件夹index.js文件： const app = getApp() Page({ /** 页面的初始数据*/data: {// 组件所需的参数nvabarData: { isBack: ‘’, //是否显示左上角图标 title: ‘首页’, //导航栏 中间的标题 isNormal: true, //导航栏背景颜色 false为渐变色 color: ‘#000’, //导航栏字体颜色},},)}~~~ 由自定义组件引发的一些问题： 下拉刷新; 安卓手机适配，目前我暂时还没想到好的办法。 美好的国庆又这样结束了，这次飞了五个机场，有差不多两天的时间都在路上，很累但是很开心。人生尚未结束，同志还需努力鸭。]]></content>
      <categories>
        <category>小程序,顶部导航栏</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue学习记录(-)]]></title>
    <url>%2F2018%2F09%2F29%2Fvue%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[路由：根据网址的不同返回不同的内容给用户 （1）定义路由组件（2）定义路由]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序实现批量删除，全选，取消全选功能的一些总结]]></title>
    <url>%2F2018%2F09%2F03%2Fmy-first-blog%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;最近有一个小程序需求是批量删除，全选和取消全选，这次记录一下这次遇到的问题。 &emsp;&emsp;一开始打算用小程序的组建checkbox实现的，但是之后发现checkbox的checked属性是单向绑定不支持双向绑定，我在实现全选和取消功能时候需要在js中更改checked的值，在文档中没有明确的说明checked是单向的，最后在社区的官方回答中找到了这个。自己回过头又仔细看了文档果然用了“设置默认选中”说明了，也有可能我太菜了所以没看出来，不管怎么样，最后我换成了view。 &emsp;&emsp;这次实现的逻辑： &emsp;&emsp;1. 点击编辑弹出全选+取消全选按钮，编辑按钮变成不可点击的删除按钮，同时每条记录前有选择按钮； &emsp;&emsp;2. 点击全选所有的选项都是选中状态，点击取消则全不选中； &emsp;&emsp;3. 单选时，没有选中的话就是点击就是选中，item.checked为true控制页面选中样式，反之item.checked= false时为取消选中状态； &emsp;&emsp;4. 如果全选状态下，列表中某一项取消选中，全选样式改变； &emsp;&emsp;5. 点击删除将选中记录的id数组传给后台进行删除。 &emsp;&emsp; js文件中data数据如下： 12345678910111213141516data: &#123; isFooter: false, doneHistory: true, flagHistory: true, hidden: false, icon: &quot;../../images/icon/Shape3.png&quot;, removeIndex: [], removeHistoryId: [], historyList: [], loading: false, isHeader: true, //选框状态 isClick: true, //删除按钮 isChoose: true, //是否选中 isChecked: false,//全选状态 deleteNum: &apos;&apos;, //删除个数&#125;, &emsp;&emsp; 在通过修改item.checked为true控制页面选中样式时，遇到了数组中的checked属性无法进行实时刷新，最后参考了一些文章找到了方法. 12345var itemIndex = e.target.dataset.index;//当前点击的下标var newChecked = &apos;historyList[&apos; + itemIndex + &apos;].checked&apos;; //重点，拼成字符串 that.setData(&#123; [newChecked]: !that.data.historyList[itemIndex].checked //用中括号括起来即可 &#125;) 参考文档：https://blog.csdn.net/stp_zsj/article/details/81979669&emsp;&emsp; &emsp;&emsp;&ensp;https://www.cnblogs.com/simuhunluo/p/7989461.html&emsp;&emsp; 使用splice()通过删除被选中项的下标实现删除功能12345678910111213141516var _reIndex = that.data.removeIndex; for (var i = 0; i &lt; _reIndex.length;i++)&#123; var _index = _reIndex[i]; console.log(_index) that.data.historyList.splice(_index, 1); &#125; that.setData(&#123; historyList: that.data.historyList, isChoose: true, removeHistoryId: [], removeIndex: [], deleteNum: &apos;&apos;, isHeader: true, isClick: true, isDelete: true, &#125;); &emsp;&emsp;其他的都挺简单的，主要是自己的做的时候把自己绕晕了，还有就是光想是不够的还要动手实践了才行。最后放出丑丑效果图 —最后20：35了，赶紧跑……]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
</search>
