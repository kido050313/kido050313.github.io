<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js中日期字符串的转换]]></title>
    <url>%2F2019%2F03%2F07%2Fjs%E4%B8%AD%E6%97%A5%E6%9C%9F%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;一些将日期格式进行转化的方法记录 一.字符串转日期&emsp;&emsp;将例如：2019-03-07 这种格式转为： 3月7日1234567891011121314151617function stringToDate(dateStr, separator) &#123; if(!separator) &#123; separator="-" &#125; var dateStr = dateStr.split(separator); var year = parseInt(dateStr[0]); var month; // 处理月份为03这种情况 if(dateStr[1].indexOf("0") == 0) &#123; month = parseInt(dateStr[1].substring(1)); &#125; else &#123; month = parseInt(dateStr[1]); &#125; var day = parseInt(dateStr[2]); var date = month + "月" + day + "日"; return date;&#125; 二. 时间戳转字符串&emsp;&emsp;如：1551949777658转成 2019-3-71234567function timesToString(timestamp) &#123; var _date = new Date(timestamp); // 根据时间戳生成的时间对象 var date = _date.getFullYear() + '-' + (_date.getMonth() + 1) + '-' + _date.getDate() return date;&#125; &emsp;&emsp;还有一些其他的转换没有接触到就不说了，总之就是利用js中的各种日期函数转和一些如分隔函数等方法灵活利用转换得到自己想要的格式。]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>日期</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序组件弹窗内跳转如何实现]]></title>
    <url>%2F2018%2F11%2F30%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6%E5%BC%B9%E7%AA%97%E5%86%85%E8%B7%B3%E8%BD%AC%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[&emsp; &emsp;日常小程序踩坑，一个普通的页面点击弹出注册弹窗，然后注册成功要将一些参数传到跳转的页面，小程序的template主要用于展示，但是这里需要用到一些交互，所以最后选定component组件制作绑定手机号的弹窗页面。 &emsp; &emsp;1. 首先先将静态页面写好，这部分很简单直接放代码 123456789101112131415161718192021222324252627282930 // dialog.wxml&lt;view class="container"&gt; &lt;block wx:if="&#123;&#123;isShow? isShow: false&#125;&#125;"&gt; &lt;view class="toast-bg" wx:if="&#123;&#123;mask==false? false : true&#125;&#125;"&gt;&lt;/view&gt; &lt;view class="toast-center"&gt; &lt;view class="toast"&gt; &lt;view class="toastTop"&gt; &lt;view class="tips"&gt; &lt;text class="toast-text"&gt;验证手机号&lt;/text&gt; &lt;/view&gt; &lt;view class="phoneNum"&gt; &lt;input class="numberPh" cursor="10" type="number" maxlength="11" selection-start="-20" placeholder-class="placeholder" placeholder="请输入手机号码" bindinput="_bindKeyInput"/&gt; &lt;/view&gt; &lt;view class="verCode"&gt; &lt;input class="codePh" type="number" maxlength="4" placeholder-class="placeholder" placeholder="请输入验证码" bindinput="_bindKeyCode"/&gt; &lt;button hidden="&#123;&#123;isClick&#125;&#125;" class="getCode" bindtap="_sentCode" disabled="&#123;&#123;isGet&#125;&#125;"&gt;获取验证码&lt;/button&gt; &lt;button hidden="&#123;&#123;isClick == false&#125;&#125;" class="getCode" bindtap="_sentCode" disabled="&#123;&#123;isDisabled&#125;&#125;"&gt;重新发送&lt;/button&gt; &lt;button hidden="&#123;&#123;isCount&#125;&#125;" class="getCode gray" type="button" disabled="disabled"&gt;&#123;&#123;countText&#125;&#125;s&lt;/button&gt; &lt;view class="line"&gt;&lt;/view&gt; &lt;view class="erroReason"&gt;&#123;&#123;message&#125;&#125;&lt;/view&gt; &lt;/view&gt; &lt;button disabled="&#123;&#123;isOk&#125;&#125;" class="codeSubmit" bindtap="_sent"&gt;提交&lt;/button&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class="closeLose" bindtap="hideDialog"&gt; &lt;image src="../../images/icon/icon_close.png"&gt;&lt;/image&gt; &lt;/view&gt; &lt;/view&gt; &lt;/block&gt;&lt;/view&gt; &emsp;&emsp;2. 自定义组件要在其json文件中显示的定义，很简单，如下： 1234 &#123; "component": true, "usingComponents": &#123;&#125;&#125; &emsp;&emsp;3. 主要就是js这一块，我遇到的主要问题是点击提交之后，要将父组件页面刷新，也就是执行父组件中的方法，查阅文档得知，父组件的方法无法传到子组件中，但是可以通过 “triggerEvent”进行组件中事件的通信（其实我觉得类似vue中的$emit），详细的可以看看文档介绍,这里只放主要代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// dialog.js _sent: function()&#123; // 通过triggerEvent()传给父组件 this.triggerEvent('submite'); &#125;, _submite: function(fn) &#123; //触发 var that = this; that.setData(&#123; isOk: true, &#125;) var groupNo = that.properties.groupNo; console.log(that.properties.groupNo); if (!that.data.phoneNum) &#123; that.setData(&#123; message: '手机号不能为空' &#125;) return; &#125; else if (!that.data.code) &#123; that.setData(&#123; message: '验证码不能为空' &#125;) return; &#125; else &#123; var _data = &#123; // 这里是参数 &#125; util.httpRequest(app.url + 'xxx/xxx', _data, function (res) &#123; console.log(res) var res = res.data; if (res.code == util.resCode.success) &#123; //更新缓存 wx.setStorage(&#123; key: 'userLoginInfo', data: res.data, &#125;) if (res.data.code == '20000')&#123; that.setData(&#123; message: '', isOk: false, &#125;) if (typeof fn == 'function') &#123; // 回调函数 fn(res); &#125; &#125; else &#123; that.setData(&#123; message: res.data.desc, isOk: false, &#125;) &#125; &#125; else &#123; that.setData(&#123; message: res.message, isOk: false, &#125;) &#125; &#125;) &#125; &#125; &emsp;&emsp; 父组件中利用bindtap接收，下面是父组件的wxml页面123// father.wxml&lt;!-- 注册组件 --&gt;&lt;dialog id="dialog" bind:submite="_sent" groupNo="&#123;&#123;groupNo&#125;&#125;"&gt;&lt;/dialog&gt; &emsp;&emsp; 父组件json文件中要注册组件123456// father.json&#123; "usingComponents": &#123; "dialog": "/common/bindMobile/index" &#125;&#125; &emsp;&emsp; 父组件js中页面渲染成功时，注册组件123456// father.jsonReady: function () &#123; var that = this; //引入注册组件 that.dialog = this.selectComponent("#dialog"); &#125; &emsp;&emsp; 父组件js中调用子组件传过来的方法12345678910// father.js//注册成功 _sent: function () &#123; var that = this; var groupNo = that.data.groupNo; that.dialog._submite(function (res) &#123; that.dialog.hideDialog(); //关闭弹窗 that.getJoindetail(); //刷新页面 &#125;, 500) &#125;, &emsp;&emsp;4. css样式，也没什么好说的 19：12，饿了饿了，溜了溜了，哒哒哒…]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序自定义顶部导航栏]]></title>
    <url>%2F2018%2F10%2F07%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%E6%A0%8F%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;今天开始了新的小程序踩坑，有一个需求是顶部导航栏需要渐变色，但是小程序的navigationBarBackgroundColor属性只支持有效的颜色值，不支持linear-gradient,最后选择了自定义导航栏开发。&emsp;&emsp;要使用小程序的自定义导航栏只需要在app.json中配置 目前小程序不支持单个页面设置，所以一旦决定使用自定义导航看，那么每个页面都要设置，为了方便我将其写成了一个组件 &emsp;&emsp; 组件目录： &emsp;&emsp; index.wxml文件:1234567891011121314151617181920212223&lt;view class="m-container"&gt; &lt;view class="navigate-title &#123;&#123;navbarData.isNormal == true?'normal':'linear'&#125;&#125;" style="padding-top:&#123;&#123;(statusBarHeight+titleBarHeight)*2&#125;&#125;rpx;"&gt;&lt;/view&gt; &lt;view class="header-title"&gt; &lt;view class="status-bar" style="height:&#123;&#123;statusBarHeight&#125;&#125;px;"&gt;&lt;/view&gt; &lt;view class="title-bar" style="height:&#123;&#123;titleBarHeight&#125;&#125;px"&gt; &lt;view class="left-icon" wx:if="&#123;&#123;navbarData.isBack&#125;&#125;"&gt; &lt;view wx:if="&#123;&#123;share&#125;&#125;"&gt; &lt;image bindtap="_backhome" class="u-home" src=''&gt;&lt;/image&gt; &lt;/view&gt; &lt;view wx:else&gt; &lt;block wx:if="&#123;&#123;navbarData.color == '#000'&#125;&#125;"&gt; &lt;image bindtap="_navback" class="navigator" src="../../images/icon/b_back.png"&gt;&lt;/image&gt; &lt;/block&gt; &lt;block wx:else&gt; &lt;image bindtap="_navback" class="navigator" src="../../images/icon/w_back.png"&gt;&lt;/image&gt; &lt;/block&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class="title" style="color:&#123;&#123;navbarData.color&#125;&#125;;"&gt;&#123;&#123;navbarData.title&#125;&#125;&lt;/view&gt; &lt;view class="right-icon"&gt;&lt;/view&gt; &lt;/view&gt; &lt;/view&gt;&lt;/view&gt; &emsp;&emsp;index.wxss文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748.header-title &#123; position: fixed; top: 0; width: 100%; z-index: 9999;&#125;.linear &#123; background: linear-gradient(90deg,#FFC426,#F99120);&#125;.normal &#123; background: #FFFCF8;&#125;.right-icon &#123; width: 100rpx; height: 100rpx; float: right;&#125;.title &#123; text-align: center; line-height: 100rpx; font-size: 38rpx;&#125;.title-bar &#123; width: 100%; overflow: hidden;&#125;.left-icon &#123; width: 100rpx; height: 100rpx; float: left;&#125;/* 返回首页 */.u-home &#123; width: 36rpx; height: 36rpx; float: left; margin-top: 32rpx; margin-left: 35rpx;&#125;/*箭头部分*/.navigator &#123; width: 18rpx; height: 34rpx; float: left; margin-top: 32rpx; /* background: #FFF; */ margin-left: 35rpx;&#125; &emsp;&emsp;index.js文件: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// common/navbar/index.jsconst app = getApp();Component(&#123; options: &#123; multipleSlots: true, // 在组件定义时的选项中启用多slot支持 &#125;, /** * 组件的属性列表 */ properties: &#123; navbarData: &#123; //navbarData 由父页面传递的数据，变量名字自命名 type: Object, value: &#123;&#125;, observer: function (newVal, oldVal) &#123; &#125; &#125; &#125;, /** * 组件的初始数据 */ data: &#123; statusBarHeight: '', titleBarHeight: '', //默认值，默认不显示 navbarData: &#123; isBack: '' &#125; &#125;, attached: function(res)&#123; // 获取是否是通过分享进入的小程序 this.setData(&#123; share: app.globalData.share &#125;) // 定义导航栏的高度 方便对齐 this.setData(&#123; statusBarHeight: wx.getStorageSync('statusBarHeight'), titleBarHeight: wx.getStorageSync('titleBarHeight') &#125;) &#125;, /** * 组件的方法列表 */ methods: &#123; // 返回上一页面 _navback() &#123; wx.navigateBack() &#125;, //返回到首页 _backhome() &#123; wx.switchTab(&#123; url: '/pages/index/index', &#125;) &#125; &#125;,&#125;) &emsp;&emsp;index.json文件: 1234&#123; "component": true, "usingComponents": &#123;&#125;&#125; &emsp;&emsp;app.js文件: 123456789101112131415161718192021222324252627282930313233343536373839//app.jsconst util = require("utils/util.js");App(&#123; onLaunch: function (options) &#123; var _this = this // 判断是否由分享进入小程序 if (options.scene == 1007 || options.scene == 1008) &#123; _this.globalData.share = true &#125; else &#123; _this.globalData.share = false &#125;; wx.getSystemInfo(&#123; success: function (res) &#123; console.log(res) // 采用百分比适配不同的安卓手机，主要针对刘海屏安卓手机(此方法有待完善) let screenHeight = res.windowHeight; let totalTopHeight = parseInt(screenHeight / 8) if (res.model.indexOf('iPhone X') !== -1) &#123; totalTopHeight = 88 &#125; else if (res.model.indexOf('iPhone') !== -1) &#123; totalTopHeight = 64 &#125; wx.setStorageSync('statusBarHeight', res.statusBarHeight) wx.setStorageSync('titleBarHeight', totalTopHeight - res.statusBarHeight) &#125;, failure() &#123; wx.setStorageSync('statusBarHeight', 0) wx.setStorageSync('titleBarHeight', 0) &#125; &#125;) &#125;, globalData: &#123; userLoginInfo: null, share: false, //分享默认为false &#125;, userLogin: function(res)&#123; console.log(res) &#125;&#125;) 如何使用自定义导航栏：在微信小程序页面中：pages文件夹index.wxml文件： 1234// 引入自定义组价。&apos;navbar-data&apos;中header是自定义名字，决定了组件中&apos;navbarData&apos;的名字&lt;view class=&quot;container&quot;&gt; &lt;header navbar-data=&apos;&#123;&#123;nvabarData&#125;&#125;&apos;&gt;&lt;/header&gt;&lt;/view&gt; &emsp;&emsp;pages文件夹index.json文件中(声明使用的组件，和组件的地址)：123&quot;usingComponents&quot;: &#123; &quot;header&quot;: &quot;/common/navbar/index&quot; &#125; &emsp;&emsp;pages文件夹index.js文件：1234567891011121314151617const app = getApp()Page(&#123; /** * 页面的初始数据 */ data: &#123; // 组件所需的参数 nvabarData: &#123; isBack: &apos;&apos;, //是否显示左上角图标 title: &apos;首页&apos;, //导航栏 中间的标题 isNormal: true, //导航栏背景颜色 false为渐变色 color: &apos;#000&apos;, //导航栏字体颜色 &#125;, &#125;,)&#125; 由自定义组件引发的一些问题： 下拉刷新; 安卓手机适配，目前我暂时还没想到好的办法。 美好的国庆又这样结束了，这次飞了五个机场，有差不多两天的时间都在路上，很累但是很开心。人生尚未结束，同志还需努力鸭。]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>顶部导航栏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序实现批量删除，全选，取消全选功能的一些总结]]></title>
    <url>%2F2018%2F09%2F03%2Fmy-first-blog%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;最近有一个小程序需求是批量删除，全选和取消全选，这次记录一下这次遇到的问题。 &emsp;&emsp;一开始打算用小程序的组建checkbox实现的，但是之后发现checkbox的checked属性是单向绑定不支持双向绑定，我在实现全选和取消功能时候需要在js中更改checked的值，在文档中没有明确的说明checked是单向的，最后在社区的官方回答中找到了这个。自己回过头又仔细看了文档果然用了“设置默认选中”说明了，也有可能我太菜了所以没看出来，不管怎么样，最后我换成了view。 &emsp;&emsp;这次实现的逻辑： &emsp;&emsp;1. 点击编辑弹出全选+取消全选按钮，编辑按钮变成不可点击的删除按钮，同时每条记录前有选择按钮； &emsp;&emsp;2. 点击全选所有的选项都是选中状态，点击取消则全不选中； &emsp;&emsp;3. 单选时，没有选中的话就是点击就是选中，item.checked为true控制页面选中样式，反之item.checked= false时为取消选中状态； &emsp;&emsp;4. 如果全选状态下，列表中某一项取消选中，全选样式改变； &emsp;&emsp;5. 点击删除将选中记录的id数组传给后台进行删除。 &emsp;&emsp; js文件中data数据如下： 12345678910111213141516data: &#123; isFooter: false, doneHistory: true, flagHistory: true, hidden: false, icon: &quot;../../images/icon/Shape3.png&quot;, removeIndex: [], removeHistoryId: [], historyList: [], loading: false, isHeader: true, //选框状态 isClick: true, //删除按钮 isChoose: true, //是否选中 isChecked: false,//全选状态 deleteNum: &apos;&apos;, //删除个数&#125;, &emsp;&emsp; 在通过修改item.checked为true控制页面选中样式时，遇到了数组中的checked属性无法进行实时刷新，最后参考了一些文章找到了方法. 12345var itemIndex = e.target.dataset.index;//当前点击的下标var newChecked = &apos;historyList[&apos; + itemIndex + &apos;].checked&apos;; //重点，拼成字符串 that.setData(&#123; [newChecked]: !that.data.historyList[itemIndex].checked //用中括号括起来即可 &#125;) 参考文档：https://blog.csdn.net/stp_zsj/article/details/81979669&emsp;&emsp; &emsp;&emsp;&ensp;https://www.cnblogs.com/simuhunluo/p/7989461.html&emsp;&emsp; 使用splice()通过删除被选中项的下标实现删除功能12345678910111213141516var _reIndex = that.data.removeIndex; for (var i = 0; i &lt; _reIndex.length;i++)&#123; var _index = _reIndex[i]; console.log(_index) that.data.historyList.splice(_index, 1); &#125; that.setData(&#123; historyList: that.data.historyList, isChoose: true, removeHistoryId: [], removeIndex: [], deleteNum: &apos;&apos;, isHeader: true, isClick: true, isDelete: true, &#125;); &emsp;&emsp;其他的都挺简单的，主要是自己的做的时候把自己绕晕了，还有就是光想是不够的还要动手实践了才行。最后放出丑丑效果图 —最后20：35了，赶紧跑……]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
</search>
